inflight_queries:
  SELECT query AS id,
      TRIM(usename) AS username,
      starttime AS TIMESTAMP,
      text AS query,
      pid AS pid
  FROM svv_query_inflight
  JOIN pg_user
  ON svv_query_inflight.userid = pg_user.usesysid
  ORDER BY id, SEQUENCE;
queries_queue:
  SELECT position,
      start_time as timestamp,
      TRIM(usename) as username,
      stl_querytext.query as id,
      stl_querytext.pid as pid,
      text as query
  FROM stl_querytext
  INNER JOIN stv_wlm_query_queue_state
  ON stl_querytext.query = stv_wlm_query_queue_state.query
  INNER JOIN pg_user
  ON pg_user.usesysid = stl_querytext.userid
  ORDER BY position, sequence;
query_alerts:
  SELECT query as id,
      event,
      solution
  FROM stl_alert_event_log
  WHERE event_time
  BETWEEN %s AND %s
  AND query IN %s
  ORDER BY event_time ASC;
table_load_errors:
  SELECT tbl as table_id,
      colname as column,
      err_reason as error,
      starttime as time,
      COUNT(*) as errors_count
  FROM stl_load_errors
  WHERE starttime BETWEEN GETDATE() - INTERVAL '24 hours' AND GETDATE()
  GROUP BY tbl, starttime, err_reason, colname;
table_design_status:
  DROP TABLE IF EXISTS temp_staging_tables_1;
  DROP TABLE IF EXISTS temp_staging_tables_2;
  DROP TABLE IF EXISTS temp_tables_report;
  CREATE TEMP TABLE temp_staging_tables_1
                   (schemaname TEXT,
                    tablename TEXT,
                    tableid BIGINT,
                    size_in_megabytes BIGINT);

  INSERT INTO temp_staging_tables_1
    SELECT n.nspname,
        c.relname,
        c.oid,
        (SELECT COUNT(*) FROM STV_BLOCKLIST b WHERE b.tbl = c.oid)
    FROM pg_namespace n, pg_class c
    WHERE n.oid = c.relnamespace
    AND nspname NOT IN ('pg_catalog', 'pg_toast', 'information_schema')
    AND c.relname <> 'temp_staging_tables_1';

  CREATE TEMP TABLE temp_staging_tables_2
                   (tableid BIGINT,
                    min_blocks_per_slice BIGINT,
                    max_blocks_per_slice BIGINT,
                    slice_count BIGINT);

  INSERT INTO temp_staging_tables_2
    SELECT tableid, MIN(c), MAX(c), COUNT(DISTINCT slice)
    FROM (SELECT t.tableid, slice, COUNT(*) AS c
        FROM temp_staging_tables_1 t, STV_BLOCKLIST b
        WHERE t.tableid = b.tbl
        GROUP BY t.tableid, slice)
    GROUP BY tableid;

  CREATE TEMP TABLE temp_tables_report
                   (schemaname TEXT,
                   tablename TEXT,
                   tableid BIGINT,
                   size_in_mb BIGINT,
                   has_dist_key INT,
                   has_sort_key INT,
                   has_col_encoding INT,
                   pct_skew_across_slices FLOAT,
                   pct_slices_populated FLOAT);

  INSERT INTO temp_tables_report
    SELECT t1.*,
        CASE WHEN EXISTS (SELECT *
                          FROM pg_attribute a
                          WHERE t1.tableid = a.attrelid
                            AND a.attnum > 0
                            AND NOT a.attisdropped
                            AND a.attisdistkey = 't')
             THEN 1 ELSE 0 END,
        CASE WHEN EXISTS (SELECT *
                          FROM pg_attribute a
                          WHERE t1.tableid = a.attrelid
                            AND a.attnum > 0
                            AND NOT a.attisdropped
                            AND a.attsortkeyord > 0)
             THEN 1 ELSE 0 END,
        CASE WHEN EXISTS (SELECT *
                          FROM pg_attribute a
                          WHERE t1.tableid = a.attrelid
                            AND a.attnum > 0
                            AND NOT a.attisdropped
                            AND a.attencodingtype <> 0)
             THEN 1 ELSE 0 END,
        100 * CAST(t2.max_blocks_per_slice - t2.min_blocks_per_slice AS FLOAT)
              / CASE WHEN (t2.min_blocks_per_slice = 0)
                     THEN 1 ELSE t2.min_blocks_per_slice END,
        CAST(100 * t2.slice_count AS FLOAT) / (SELECT COUNT(*) FROM STV_SLICES)
    FROM temp_staging_tables_1 t1, temp_staging_tables_2 t2
    WHERE t1.tableid = t2.tableid;

  SELECT * FROM temp_tables_report ORDER BY size_in_mb DESC;
tables_rows_sort_status:
# The query is limited to the current database in use,
# since STV_TBL_PERM holds info on tables from all databases
# in contrary to pg_class and pg_namespace which are limited
# to the database of the current connection.
  SELECT id as table_id,
      SUM(rows) as total_rows,
      SUM(sorted_rows) as sorted_rows,
      SUM(sorted_rows)::float/SUM(rows)::float as percent_sorted
  FROM stv_tbl_perm
  WHERE db_id=%s AND temp=0
  GROUP BY id
  HAVING SUM(stv_tbl_perm.rows)>0;
table_id_mapping:
  SELECT pg_class.OID as table_id,
      TRIM(pg_class.relname) as table_name,
      TRIM(pg_namespace.nspname) as schema_name
  FROM pg_class
  INNER JOIN pg_namespace
  ON pg_class.relnamespace=pg_namespace.OID;
